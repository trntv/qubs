// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/grpc/message.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Seq                  string   `protobuf:"bytes,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Queue                string   `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Tags                 []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Payload              []byte   `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_1511559478be0495, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *Message) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *Message) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Ack struct {
	Seq                  string   `protobuf:"bytes,1,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_1511559478be0495, []int{1}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type ConsumerConnect struct {
	Queue                string   `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumerConnect) Reset()         { *m = ConsumerConnect{} }
func (m *ConsumerConnect) String() string { return proto.CompactTextString(m) }
func (*ConsumerConnect) ProtoMessage()    {}
func (*ConsumerConnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_1511559478be0495, []int{2}
}

func (m *ConsumerConnect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumerConnect.Unmarshal(m, b)
}
func (m *ConsumerConnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumerConnect.Marshal(b, m, deterministic)
}
func (m *ConsumerConnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerConnect.Merge(m, src)
}
func (m *ConsumerConnect) XXX_Size() int {
	return xxx_messageInfo_ConsumerConnect.Size(m)
}
func (m *ConsumerConnect) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerConnect.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerConnect proto.InternalMessageInfo

func (m *ConsumerConnect) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "grpc.Message")
	proto.RegisterType((*Ack)(nil), "grpc.Ack")
	proto.RegisterType((*ConsumerConnect)(nil), "grpc.ConsumerConnect")
}

func init() { proto.RegisterFile("protocol/grpc/message.proto", fileDescriptor_1511559478be0495) }

var fileDescriptor_1511559478be0495 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xdf, 0x4a, 0x80, 0x30,
	0x18, 0xc5, 0x5d, 0xb3, 0x86, 0x1f, 0x45, 0xf1, 0x51, 0x34, 0xec, 0x46, 0x06, 0x91, 0x57, 0x1a,
	0xf9, 0x04, 0x22, 0x5d, 0x76, 0xe3, 0x0b, 0xc4, 0x5a, 0xc3, 0x0b, 0x75, 0x53, 0xa7, 0x17, 0xbd,
	0x7d, 0xb8, 0x19, 0xfd, 0xbb, 0x3b, 0xe7, 0x37, 0xce, 0x39, 0xdb, 0xe0, 0x6e, 0x5a, 0xec, 0x6a,
	0x95, 0x1d, 0xca, 0x6e, 0x99, 0x54, 0x39, 0x6a, 0xe7, 0x64, 0xa7, 0x0b, 0x4f, 0x31, 0xde, 0x99,
	0x78, 0x05, 0xf6, 0x12, 0x30, 0x5e, 0x01, 0x75, 0x7a, 0xe6, 0x24, 0x23, 0x79, 0xd2, 0xee, 0x12,
	0xaf, 0xe1, 0x74, 0xde, 0xf4, 0xa6, 0xf9, 0x89, 0x67, 0xc1, 0x20, 0x42, 0xbc, 0xca, 0xce, 0x71,
	0x9a, 0xd1, 0x3c, 0x69, 0xbd, 0x46, 0x0e, 0x6c, 0x92, 0x1f, 0x83, 0x95, 0xef, 0x3c, 0xce, 0x48,
	0x7e, 0xde, 0x7e, 0x59, 0x71, 0x0b, 0xb4, 0x56, 0xfd, 0xff, 0x72, 0xf1, 0x00, 0x97, 0x8d, 0x35,
	0x6e, 0x1b, 0xf5, 0xd2, 0x58, 0x63, 0xb4, 0x5a, 0xbf, 0xf7, 0xc8, 0x8f, 0xbd, 0x27, 0x75, 0x50,
	0xac, 0x80, 0x1d, 0x09, 0xbc, 0x29, 0xf6, 0xdb, 0x17, 0x7f, 0x0a, 0xd2, 0x8b, 0x80, 0x8f, 0x17,
	0x89, 0xe8, 0x91, 0xe0, 0x3d, 0xb0, 0x67, 0x13, 0xf2, 0xbf, 0x4f, 0xd3, 0x24, 0xd8, 0x5a, 0xf5,
	0x22, 0x7a, 0x3b, 0xf3, 0x9f, 0x52, 0x7d, 0x06, 0x00, 0x00, 0xff, 0xff, 0x87, 0xfb, 0x61, 0x98,
	0x33, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueueClient interface {
	Consume(ctx context.Context, in *ConsumerConnect, opts ...grpc.CallOption) (Queue_ConsumeClient, error)
	Enqueue(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Ack, error)
}

type queueClient struct {
	cc *grpc.ClientConn
}

func NewQueueClient(cc *grpc.ClientConn) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) Consume(ctx context.Context, in *ConsumerConnect, opts ...grpc.CallOption) (Queue_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Queue_serviceDesc.Streams[0], "/grpc.queue/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &queueConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Queue_ConsumeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type queueConsumeClient struct {
	grpc.ClientStream
}

func (x *queueConsumeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queueClient) Enqueue(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/grpc.queue/Enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServer is the server API for Queue service.
type QueueServer interface {
	Consume(*ConsumerConnect, Queue_ConsumeServer) error
	Enqueue(context.Context, *Message) (*Ack, error)
}

// UnimplementedQueueServer can be embedded to have forward compatible implementations.
type UnimplementedQueueServer struct {
}

func (*UnimplementedQueueServer) Consume(req *ConsumerConnect, srv Queue_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (*UnimplementedQueueServer) Enqueue(ctx context.Context, req *Message) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}

func RegisterQueueServer(s *grpc.Server, srv QueueServer) {
	s.RegisterService(&_Queue_serviceDesc, srv)
}

func _Queue_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumerConnect)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueueServer).Consume(m, &queueConsumeServer{stream})
}

type Queue_ConsumeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type queueConsumeServer struct {
	grpc.ServerStream
}

func (x *queueConsumeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Queue_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.queue/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Enqueue(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Queue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _Queue_Enqueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _Queue_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol/grpc/message.proto",
}
